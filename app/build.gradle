apply plugin: 'com.android.application'


def getTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault());
}


android {

    signingConfigs {
        singnedconfig {
            keyAlias 'kenwood'
            keyPassword 'android'
            storeFile file('../tools/debug.keystore')
            storePassword 'android'
        }
    }

    compileSdkVersion 25
    defaultConfig {
        applicationId "com.askey.dvr.cdr7010.filemanagement"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        project.archivesBaseName = "FileManagement";
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.singnedconfig
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=gcc"
                cppFlags "-fexceptions"
            }
        }

        ndk {
            moduleName "hello_jni"
            stl "stlport_static"
            ldLibs =["log"]
            abiFilters "armeabi", "armeabi-v7a"
        }

    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.singnedconfig
            jniDebuggable true
        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.singnedconfig
        }

    }

    //打包后应用名称
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                fileName = "FileManagement.${defaultConfig.versionName}.${getTime()}.apk"
                fileName = "FileManagement.apk"
                outputFileName  = fileName
            }

        }
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/aidl', 'src/main/aidl/']
            jni.srcDirs = ['src/main/jni']
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    productFlavors {
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
}

repositories{
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compileOnly files('libs/platform_library.jar')
    implementation 'com.android.support:appcompat-v7:25.4.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:25.4.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
